（下文中的「昨天」特指 2019 年 6 月 17 日，做笔记的时间是 2019 年 6 月 18 日）
（因为昨天看了 235 页的代码大全，并且看完了，内容很多印象比较深）
（还是建议大家快速读完完整的一遍代码大全，会很有收获）


4:20 - 5:00
「game 只是提供底层机制的一个对象，那游戏结束的画面和游戏开始的画面和游戏的标题画面还有....画面。它们每个画面是不一样的，每个完整的画面里面都可以画很多很多个东西，但是每个完整的画面都是独立的，你可以把它想象成一个独立的东西。我们每时每刻这个 game 的 draw 只会去 draw 它当时被激活的场景，所以我们是实际上需要一个中间层」
这里出现的「底层」和「中间层」想起昨天看代码大全里 29.3 「增量集成策略」里介绍的各种策略

6:50
萧大写的 scene.js 这个文件里的类名直接就是 Scene 也跟代码大全提倡的一样
比如 P771 - P772 的「文件和程序布局」这一小节的内容
比如 P780 里的核对表中对类的要求，实际上我觉得几乎整本书的关于 类 的都是这样要求的）

7:45
还有讨论到为什么要用 JS 而不用其他，也让我想起
P66 - 69 4.3「你在技术浪潮的位置」的「深入一种语言去编程」
P843 的 34.4 「深入一门语言去编程，不浮于表面」
P845 - P847 34.6 「基于问题领域编程」以及其中的图 34 - 1
P851 - P853 34.9 「汝当分离软件与信仰」里头有个「工具箱」的比喻，我觉得纠结编程语言信仰的人或许可以看看
P457 「复杂度的重要性」
P839 「Fred Brook 指出，计算机最了不起的成就，就是从机器语言跃进到高级语言，解放了程序员 —— 后者不用再操心某种特定的硬件细节，而能够专心于编程（Brooks 1995）」。
「总而言之，软件设计与构建的主要目标就是征服复杂度。许多编程实践背后而动机正是为了降低程序的复杂度。」
我觉得萧大选方便的 JavaScript 也是同样的道理。别人 1995 年就知道的道理，现在好像还是有很多人不懂。

8:55 - 9:30
「我可以用，但是就让看程序的其他人变得难以理解了」
又想到很多昨天看到的内容，比如：
P801 「不要注释投机取巧的代码，应重写之」，虽然这里说的是注释，但我觉得本质上还是提倡要写让人看得懂的代码（不过我觉得几乎整本书都在阐明这个重要的论点）
P841 的 34.3 「首先为人写程序，其次才是为机器」
P848 的 34.7 「当心落石」

12:00 - 12:43
这里说的 git 的本来用法是啥（听不太清），有些好奇（虽然不重要）

16:42 - 18:05
这里说到那些上来就能写「完美程序」的人好像好牛啊，想起
P592 「Pareto 法则」中说的 「曾设计了 Algol 语言的团队有以下建议："The best is the enemy of the good."（完美是优良之大敌）。越是追求完美，越有可能完不成任务。程序员首先应该实现程序应该具备的所有功能，然后再使程序榛与完美。」
P595 - P596 「程序的运行速度同其正确性同等重要 —— 错误！」里这个例子也让人印象深刻。
P823 「有效编程的关键之一就是要学会迅速制造错误，并且每次都能从中有所收获。犯错不是罪过，从中学不到什么才是罪过。」

33:14 - 34:52（scene 的逻辑没听懂，写下来，体会一下）
再解释了下那个 scene 的逻辑
我们希望 game 完全初始化，初始化就是说把这个图片都载入进来之后，再去调用这个函数来执行。
因为我们的 scene 必须要有个 game，对不对？不然它没法运转。
然后 scene 有了 game 之后有了 scene，那 game 要 run 呢，必须要有个 scene
所以说我们通过这样一个顺序问题，手动地调用 runWithScene，把这个问题给解决了
这个 run （guagame.js 里第 80 行的 g.run()）是会在图片载入完成之后，这个地方就是你所有图片载入完成之后才会调用 run
你调用 run ，或者我把这个 g.run() 改成 g.__start() （guagame.js 第 80 行），让它变成一个内部的东西还是可以的
我通过这样的方式保证了一个执行的顺序，什么顺序呢？
首先载入图片
载入图片完成之后，我去初始化一个 scene
初始化完成 scene 之后我来 run 这个 game，就可以了。
那我在运行的时候随时都可以替换掉这个 scene，我可以来一个 replaceScene 函数
我可以随时替换掉 scene，每个 scene 它都有一些自己的东西，它有一些自己的事件机制，还有些自己的 block

39:06
「你什么都不用，你回家种地去」
哈哈哈哈

45:20
只要我想我就可以拆得很细很细，可以写得非常井井有条

46:25
世界是变化的，世界变得是很快的，跟不上时代发展，不会和其他文化融合的，你是肯定会被淘汰的，程序也是一样，死抱着自己那点东西，你能学到啥啊，学不到啥的。
P831 - P832 经验 「如果你不能与时俱进，经验不但不会有说帮助，反而是个累赘」
P603
「经验对性能优化也没有太大的帮助。一个人的经验或许来源于一台老掉牙的计算机，或许来自于过时的语音或编译器——任何一种因素发生改变后，所有的经验之谈也会成为狗屁。」
