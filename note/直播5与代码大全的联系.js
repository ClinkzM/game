（下文中的「昨天」特指 2019 年 6 月 17 日，做笔记的时间是 2019 年 6 月 18 日）
（因为昨天看了 235 页的代码大全，并且看完了，内容很多印象比较深）

4:20 - 5:00
「game 只是提供底层机制的一个对象，那游戏结束的画面和游戏开始的画面和游戏的标题画面还有....画面。它们每个画面是不一样的，每个完整的画面里面都可以画很多很多个东西，但是每个完整的画面都是独立的，你可以把它想象成一个独立的东西。我们每时每刻这个 game 的 draw 只会去 draw 它当时被激活的场景，所以我们是实际上需要一个中间层」
这里出现的「底层」和「中间层」想起昨天看代码大全里 29.3 「增量集成策略」里介绍的各种策略

6:50
萧大写的 scene.js 这个文件里的类名直接就是 Scene 也跟代码大全提倡的一样
比如 P771 - P772 的「文件和程序布局」这一小节的内容
比如 P780 里的核对表中对类的要求，实际上我觉得几乎整本书的关于类的都是这样要求的）

7:45
还有讨论到为什么要用 JS 而不用其他，也让我想起
P66 - 69 4.3「你在技术浪潮的位置」的「深入一种语言去编程」
P843 的 34.4 「深入一门语言去编程，不浮于表面」
P845 - P847 34.6 「基于问题领域编程」以及其中的图 34 - 1
P851 - P853 34.9 「汝当分离软件与信仰」里头有个「工具箱」的比喻，我觉得纠结编程语言信仰的人或许可以看看
P839 「Fred Brook 指出，计算机最了不起的成就，就是从机器语言跃进到高级语言，解放了程序员 —— 后者不用再操心某种特定的硬件细节，而能够专心于编程（Brooks 1995）」。
「总而言之，软件设计与构建的主要目标就是征服复杂度。许多编程实践背后而动机正是为了降低程序的复杂度。」
我觉得萧大选方便的 JavaScript 也是同样的道理。别人 1995 年就知道的道理，现在好像还是有很多人不懂。

8:55 - 9:30
「我可以用，但是就让看程序的其他人变得难以理解了」
又想到很多昨天看到的内容，比如：
P801 「不要注释投机取巧的代码，应重写之」，虽然这里说的是注释，但我觉得本质上还是提倡要写让人看得懂的代码（不过我觉得几乎整本书都在阐明这个重要的论点）
P841 的 34.3 「首先为人写程序，其次才是为机器」
P848 的 34.7 「当心落石」
